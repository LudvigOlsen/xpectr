% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_expectations_from_selection.R
\name{gxs_selection}
\alias{gxs_selection}
\title{Generate testhat expectations from selection}
\usage{
gxs_selection(
  selection,
  indentation = 0,
  strip = TRUE,
  tolerance = "1e-4",
  envir = NULL,
  sample_n = 30,
  add_wrapper_comments = TRUE,
  add_test_comments = TRUE,
  out = "insert"
)
}
\arguments{
\item{selection}{String of code. (Character)

E.g. \code{"stop('This gives an expect_error test')"}.}

\item{indentation}{Indentation of the selection. (Numeric)}

\item{strip}{Whether to insert
\code{\link[xpectr:strip]{strip_msg()}} and
\code{\link[xpectr:strip]{strip()}}
in tests of side effects. (Logical)

Sometimes testthat tests have differences in punctuation and newlines on different
systems. By stripping both the error message and the expected message of non-alphanumeric symbols,
we can avoid such failed tests.}

\item{tolerance}{The tolerance for numeric tests as a string. (Character)}

\item{envir}{Environment to evaluate in.}

\item{sample_n}{The number of elements/rows to sample. Set to \code{NULL} to avoid sampling.

Inserts \code{\link[xpectr:strip]{smpl()}} in the generated tests when sampling was used. A seed is
set internally, setting \code{sample.kind} as \code{"Rounding"} to ensure compatibility with R versions
\code{< 3.6.0}.

The order of the elements/rows is kept intact. No replacement is used, why no oversampling will
take place.

When testing a big data frame, sampling the rows can help keep the test files somewhat readable.}

\item{add_wrapper_comments}{Whether to add intro and outro comments. (Logical)}

\item{add_test_comments}{Whether to add comments for each test. (Logical)}

\item{out}{Either \code{"insert"} or \code{"return"}.

\subsection{"insert" (Default)}{
Inserts the expectations via
\code{\link[rstudioapi:insertText]{rstudioapi::insertText()}}.
}
\subsection{"return"}{
Returns the expectations in a list.

These can be prepared for insertion with
\code{\link[xpectr:prepare_insertion]{prepare_insertion()}}.
}}
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

Based on the selection (string of code), a set of testthat \code{expect_*}
statements are generated.

Example: If the selected code is the name of a data frame object,
it will create an \code{\link[testthat:expect_equal]{expect_equal}}
test for each column, along with a test of the column names.

Currently supports side effects (error, warnings, messages),
data frames, vectors, and factors.

List columns in data frames (like nested tibbles) are currently skipped.

Addin: \code{\link[xpectr:insertExpectationsAddin]{insertExpectationsAddin()}}
}
\examples{
# Attach packages
library(xpectr)

\donttest{
df <- data.frame('a' = c(1, 2, 3), 'b' = c('t', 'y', 'u'),
                 stringsAsFactors = FALSE)

gxs_selection("stop('This gives an expect_error test!')")
gxs_selection("warning('This gives an expect_warning test!')")
gxs_selection("message('This gives an expect_message test!')")
gxs_selection("stop('This: tests the -> punctuation!')", strip = FALSE)
gxs_selection("sum(1, 2, 3, 4)")
gxs_selection("df")

tests <- gxs_selection("df", out = "return")
for_insertion <- prepare_insertion(tests)
rstudioapi::insertText(for_insertion)
}
}
\seealso{
Other expectation generators: 
\code{\link{gxs_function}()},
\code{\link{insertExpectationsAddin}()}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
\concept{expectation generators}
