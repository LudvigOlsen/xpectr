% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gxs_function.R
\name{gxs_function}
\alias{gxs_function}
\title{Generate testhat expectations for argument values in a function}
\usage{
gxs_function(
  fn,
  args_values,
  check_nulls = TRUE,
  indentation = 0,
  strip = TRUE,
  tolerance = "1e-4",
  envir = NULL,
  sample_n = 30,
  out = "insert"
)
}
\arguments{
\item{fn}{Function to create tests for.}

\item{args_values}{The arguments and the values to create tests for.
Should be supplied as a named list of lists, like the following:

\code{args_values = list("x1" = list(\strong{1},2,3), "x2" = list(\strong{"a"},"b","c"))}

The first value for each argument (referred to as the 'baseline' value) should be valid
(not throw an error/message/warning).
\strong{N.B.} This is not checked but should lead to more meaningful tests.

\strong{N.B.} Please define the list directly in the function call.
This is currently necessary.}

\item{check_nulls}{Whether to try all arguments with \code{NULL}. (Logical)

Note: With this enabled, you don't need to add \code{NULL} to your \code{args_values},
unless it should be the baseline value.}

\item{indentation}{Indentation of the selection. (Numeric)}

\item{strip}{Whether to insert
\code{\link[xpectr:strip]{strip_msg()}} and
\code{\link[xpectr:strip]{strip()}}
in tests of side effects. (Logical)

Sometimes testthat tests have differences in punctuation and newlines on different
systems. By stripping both the error message and the expected message of non-alphanumeric symbols,
we can avoid such failed tests.}

\item{tolerance}{The tolerance for numeric tests as a string. (Character)}

\item{sample_n}{The number of elements/rows to sample. Set to \code{NULL} to avoid sampling.

Inserts \code{\link[xpectr:strip]{smpl()}} in the generated tests when sampling was used. A seed is
set internally, setting \code{sample.kind} as \code{"Rounding"} to ensure compatibility with R versions
\code{< 3.6.0}.

The order of the elements/rows is kept intact. No replacement is used, why no oversampling will
take place.

When testing a big data frame, sampling the rows can help keep the test files somewhat readable.}

\item{out}{Either "insert" or "return".

\subsection{"insert" (Default)}{
Inserts the expectations via
\code{\link[rstudioapi:insertText]{rstudioapi::insertText()}}.
}
\subsection{"return"}{
Returns the expectations in a list.

These can be prepared for insertion with
\code{\link[xpectr:prepare_insertion]{prepare_insertion()}}.
}}
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

Based on a set of supplied values for each function argument,
a set of testthat \code{expect_*} statements are generated.

\strong{Included tests}: The first value supplied for an argument
is considered the \emph{valid baseline} value. For each argument, we
create tests for each of the supplied values, where the other arguments
have their baseline value.

Currently, supported tests are of side effects (error, warnings, messages),
data frames, and vectors. List columns in data frames (like nested tibbles) are skipped.

\strong{N.B.} This function is undergoing active development!
}
\examples{
# Attach packages
library(xpectr)

\donttest{
fn <- function(x, y, z){
  if (x>3) stop("'x' > 3")
  if (y<0) warning("'y'<0")
  if (z==10) message("'z' was 10!")
  x + y + z
}

# Create expectations
# Note: define the list in the call
gxs_function(fn,
             list("x" = list(2, 4, NA),
                  "y" = list(0, -1),
                  "z" = list(5, 10, 15)))
}
}
\seealso{
Other expectation generators: 
\code{\link{gxs_selection}()},
\code{\link{insertExpectationsAddin}()}
}
\author{
Ludvig Renbo Olsen, \email{r-pkgs@ludvigolsen.dk}
}
\concept{expectation generators}
